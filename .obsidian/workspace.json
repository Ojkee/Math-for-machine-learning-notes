{
  "main": {
    "id": "d411487204e3b9a9",
    "type": "split",
    "children": [
      {
        "id": "c6398051198efccd",
        "type": "tabs",
        "children": [
          {
            "id": "c7f54cb5f8311614",
            "type": "leaf",
            "state": {
              "type": "markdown",
              "state": {
                "file": "Books/Functional Programming in C++/13. Testing and debugging.md",
                "mode": "source",
                "source": false
              },
              "icon": "lucide-file",
              "title": "13. Testing and debugging"
            }
          }
        ]
      }
    ],
    "direction": "vertical"
  },
  "left": {
    "id": "26750fb670ff3367",
    "type": "split",
    "children": [
      {
        "id": "ca57635e64a797fb",
        "type": "tabs",
        "dimension": 78.23061630218687,
        "children": [
          {
            "id": "794c5fa3909b0417",
            "type": "leaf",
            "state": {
              "type": "file-explorer",
              "state": {
                "sortOrder": "alphabetical",
                "autoReveal": false
              },
              "icon": "lucide-folder-closed",
              "title": "Files"
            }
          },
          {
            "id": "b6bd588ad0d60c9c",
            "type": "leaf",
            "state": {
              "type": "search",
              "state": {
                "query": "",
                "matchingCase": false,
                "explainSearch": false,
                "collapseAll": false,
                "extraContext": false,
                "sortOrder": "alphabetical"
              },
              "icon": "lucide-search",
              "title": "Search"
            }
          },
          {
            "id": "6733dcfd82a09f45",
            "type": "leaf",
            "state": {
              "type": "bookmarks",
              "state": {},
              "icon": "lucide-bookmark",
              "title": "Bookmarks"
            }
          }
        ]
      },
      {
        "id": "27300ae0ddd9fe2c",
        "type": "tabs",
        "dimension": 21.76938369781312,
        "children": [
          {
            "id": "ac12ce0bc539f5e5",
            "type": "leaf",
            "state": {
              "type": "graph",
              "state": {},
              "icon": "lucide-git-fork",
              "title": "Graph view"
            }
          }
        ]
      }
    ],
    "direction": "horizontal",
    "width": 287.5
  },
  "right": {
    "id": "cda3adf6bf0b37af",
    "type": "split",
    "children": [
      {
        "id": "446ee21d04fe11e3",
        "type": "tabs",
        "children": [
          {
            "id": "d23589163ff0d960",
            "type": "leaf",
            "state": {
              "type": "backlink",
              "state": {
                "file": "Papers/Neural Machine Translation by Jointly Learning to Align and Translate/Neural Machine Translation by Jointly Learning to Align and Translate.md",
                "collapseAll": false,
                "extraContext": false,
                "sortOrder": "alphabetical",
                "showSearch": false,
                "searchQuery": "",
                "backlinkCollapsed": false,
                "unlinkedCollapsed": true
              },
              "icon": "links-coming-in",
              "title": "Backlinks for Neural Machine Translation by Jointly Learning to Align and Translate"
            }
          },
          {
            "id": "3042b20fe89699d6",
            "type": "leaf",
            "state": {
              "type": "outgoing-link",
              "state": {
                "file": "Papers/Keeping Neural Networks Simple by Minimizing the Description Length of the Weights/Keeping Neural Networks Simple by Minimizing the Description Length of the Weights.md",
                "linksCollapsed": false,
                "unlinkedCollapsed": true
              },
              "icon": "links-going-out",
              "title": "Outgoing links from Keeping Neural Networks Simple by Minimizing the Description Length of the Weights"
            }
          },
          {
            "id": "11b5d6a3984e05e5",
            "type": "leaf",
            "state": {
              "type": "tag",
              "state": {
                "sortOrder": "frequency",
                "useHierarchy": true
              },
              "icon": "lucide-tags",
              "title": "Tags"
            }
          },
          {
            "id": "87f4bc9a890d2fff",
            "type": "leaf",
            "state": {
              "type": "outline",
              "state": {
                "file": "Papers/Keeping Neural Networks Simple by Minimizing the Description Length of the Weights/Keeping Neural Networks Simple by Minimizing the Description Length of the Weights.md"
              },
              "icon": "lucide-list",
              "title": "Outline of Keeping Neural Networks Simple by Minimizing the Description Length of the Weights"
            }
          },
          {
            "id": "a57b4e127c52cf90",
            "type": "leaf",
            "state": {
              "type": "git-view",
              "state": {},
              "icon": "git-pull-request",
              "title": "Source Control"
            }
          },
          {
            "id": "c2cd01b06929ffc2",
            "type": "leaf",
            "state": {
              "type": "git-history-view",
              "state": {},
              "icon": "lucide-file",
              "title": "Plugin no longer active"
            }
          }
        ],
        "currentTab": 4
      }
    ],
    "direction": "horizontal",
    "width": 200,
    "collapsed": true
  },
  "left-ribbon": {
    "hiddenItems": {
      "switcher:Open quick switcher": false,
      "graph:Open graph view": false,
      "canvas:Create new canvas": false,
      "daily-notes:Open today's daily note": false,
      "templates:Insert template": false,
      "command-palette:Open command palette": false,
      "obsidian-git:Open Git source control": false
    }
  },
  "active": "c7f54cb5f8311614",
  "lastOpenFiles": [
    "Books/Functional Programming in C++/README.md",
    "Books/Functional Programming in C++/11. Template metaprogramming.md",
    "Books/Functional Programming in C++/12. Functional design for concurrent systems.md",
    "Books/Functional Programming in C++/13. Testing and debugging.md",
    "Books/Functional Programming in C++/10. Monads.md",
    "Books/Functional Programming in C++/9. Algebraic data types and pattern matching.md",
    "Books/Functional Programming in C++/8. Functional data structures.md",
    "Books/Functional Programming in C++/1. Introduction to functional programming.md",
    "Books/Functional Programming in C++/7. Ranges.md",
    "Books/Functional Programming in C++/code/cache.cc",
    "Books/Functional Programming in C++/code/memofib.cc",
    "Books/Functional Programming in C++/code",
    "Books/Functional Programming in C++/6. Lazy evaluation.md",
    "Books/Functional Programming in C++/4. Creating new functions from the old ones.md",
    "Books/Functional Programming in C++/5. Purity. Avoiding mutable state.md",
    "Books/Functional Programming in C++/3. Function objects.md",
    "Books/Functional Programming in C++/2. Getting started with functional programming.md",
    "Books/Effective Modern C++/README.md",
    "Books/Math-for-machine-learning/README.md",
    "Books/Pattern-recognition-and-machine-learning/README.md",
    "Books/Functional Programming in C++",
    "Books/Untitled.md",
    "Books/Effective Modern C++/8. Tweaks/42. Consider emplacement instead of insertion.md",
    "Books/Effective Modern C++/8. Tweaks/41. Consider pass by value for copyable parameters that are chap to move and always copied.md",
    "Books/Effective Modern C++/8. Tweaks",
    "Books/Effective Modern C++/7. The Concurrency API",
    "Books/Effective Modern C++/6. Lambda Expressions",
    "Books/Effective Modern C++/5. Rvalue References, Move Semantics, and Perfect Forwarding",
    "Books/Effective Modern C++/4. Smart Pointers",
    "Books/Effective Modern C++/3. Moving to Modern C++/11. Prefer deleted functions to private undefined ones.md",
    "README.md",
    "Books/Effective Modern C++/3. Moving to Modern C++/8. Prefer nullptr to 0 and NULL.md",
    "Books/Effective Modern C++/3. Moving to Modern C++",
    "Books/Effective Modern C++/7. The Concurrency API/40. Use std..atomic for concurrency, volatile for special memory.md",
    "Books/Effective Modern C++/7. The Concurrency API/39. Consider void futures for one-shot event communication.md",
    "Books/Effective Modern C++/7. The Concurrency API/38. Be aware of varying thread handle destructor behavior.md",
    "Uni-Math/ZZIMGS/Pasted image 20250409204304.png",
    "Uni-Math/ZZIMGS/Pasted image 20250409204127.png",
    "Uni-Math/ZZIMGS/Pasted image 20250408220847.png",
    "Uni-Math/ZZIMGS/Pasted image 20250408220830.png",
    "Uni-Math/ZZIMGS/Pasted image 20250408220815.png",
    "Uni-Math/ZZIMGS/Pasted image 20250408220724.png",
    "Uni-Math/ZZIMGS/Pasted image 20250408220704.png",
    "Uni-Math/ZZIMGS/Pasted image 20250408215855.png",
    "Uni-Math/ZZIMGS/Screenshot from 2025-04-08 21-56-48.png",
    "Uni-Math/ZZIMGS/Pasted image 20250408215709.png"
  ]
}